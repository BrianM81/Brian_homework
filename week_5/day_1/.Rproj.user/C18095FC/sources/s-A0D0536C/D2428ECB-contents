---
title: "R Notebook"
output: html_notebook
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*. 

```{r}
library(ggplot2)
library(CodeClanData)
```

```{r}
ggplot(pets) +
  aes(age, weight, colour = sex) +
  geom_point()
```

#Lets fix the age so it's in integers

```{r}
ggplot(pets) +
  aes(age, weight, colour = sex) +
  geom_point() +
  scale_x_continuous(breaks = 1:13)
```

#We can now change the y axis

```{r}
ggplot(pets) +
  aes(age, weight, colour = sex) +
  geom_point() +
  scale_x_continuous(breaks = 1:13) +
  scale_y_continuous(breaks = c(6, 8, 10), #add labels now
                     labels = c("6" = "Small",
                                "8" = "Medium",
                                "10" = "Large")
  )
```

#Task
```{r}
ggplot(pets) +
  aes(age, weight, colour = sex) +
  geom_point() +
  scale_x_continuous(breaks = c(1:13),
                     labels = c("1" = "Baby",
                                "6" = "All Grown Up",
                                "10" = "Over The Hill")) +
  scale_y_continuous(breaks = c(6, 8, 10), #add labels now
                     labels = c("6" = "Small",
                                "8" = "Medium",
                                "10" = "Large")
  )
```

```{r}
library(scales)
```

```{r}
ggplot(flatPrices) +
  aes(x = Date, y = AvgFlatPrice) +
  geom_line()
```

```{r}
ggplot(flatPrices) +
  aes(x = Date, y = AvgFlatPrice) +
  geom_line() +
  ylab("average flat price (£)\n") +
  scale_y_continuous(labels = scales::comma)
```
#Can change value to dollar
```{r}
ggplot(flatPrices) +
  aes(x = Date, y = AvgFlatPrice) +
  geom_line() +
  ylab("average flat price \n") +
  scale_y_continuous(labels = scales::dollar_format(prefix = "£"))
```

#There is a percent function which can be useful
```{r}
library(dplyr)
# create the percent column
flatPrices <- flatPrices %>%
  mutate(percent_change = AvgFlatPrice/AvgFlatPrice[1])
```

```{r}
ggplot(flatPrices) +
  aes(x = Date, y = percent_change) +
  geom_line() + 
  scale_y_continuous(labels = scales::percent) +
  ylab("percent change relative to start \n")
```

#Look at scale limits now

```{r}
ggplot(pets, aes(age, weight)) +
  geom_point(aes(colour = sex), size = 4) +
  scale_x_continuous(
    name = "Age",
    breaks = seq(13),
  ) + 
  scale_y_continuous(
    name = "Weight",
    breaks = c(6, 8, 10),
    labels = c(
      "6" = "Light",
      "8" = "Normal",
      "10" = "Heavy"
    )
  )
```

#Let's say you want to look at animals between agres of 1 and 8

```{r}
ggplot(pets, aes(age, weight)) +
  geom_point(aes(colour = sex), size = 4) +
  scale_x_continuous(
    name = "Age",
    breaks = seq(13),
    limits = c(1,8)
  ) + 
  scale_y_continuous(
    name = "Weight",
    breaks = c(6, 8, 10),
    labels = c(
      "6" = "Light",
      "8" = "Normal",
      "10" = "Heavy"
    )
  )
```

#Can also use xlim, which can do the same thing

#Changing the actual scale of the values

```{r}
head(whisky)
```

```{r}
ggplot(whisky) +
  aes(x = YearFound, y = Capacity, colour = Region) +
  geom_point()
```

#Lets look at the scale (don't reverse time, but this is just to show how to)

```{r}
ggplot(whisky) +
  aes(x = YearFound, y = Capacity, colour = Region) +
  geom_point() +
  scale_x_reverse()
```

#Remember log plots are relative values, not absolute, so scale could say, go from 10 to 20 would be same as 20 to 40 (100% increase)

```{r}
ggplot(whisky) +
  aes(x = YearFound, y = Capacity, colour = Region) +
  geom_point() +
  scale_y_continuous(trans = "log10")
```

#Lets try a histogram with above data
```{r}
ggplot(whisky) +
  aes(x = YearFound, fill = Region) +
  geom_histogram(bins = 30)
```

#You can flip axes(may not be most useful in this case, but just to show that you can do it)

```{r}
ggplot(whisky) +
  aes(x = YearFound, fill = Region) +
  geom_histogram(bins = 30) +
  coord_flip()
```

Could also try coord_fixed

```{r}
ggplot(whisky) +
  aes(x = YearFound, fill = Region) +
  geom_histogram(bins = 30) +
  coord_flip()
```

#Now going to try doing a pie chart

```{r}
snacks <- data.frame(
  group = c("Cakes", "Biscuits", "Jaffa Cakes"),
  count = c(30, 50, 20)
)
ggplot(snacks) + 
  aes(x = " ", y = count, fill = group) +
  geom_bar(width = 0.5, stat = "identity") + 
  xlab("biscuits")
```
#We do this by changing co-ordinates

```{r}
snacks <- data.frame(
  group = c("Cakes", "Biscuits", "Jaffa Cakes"),
  count = c(30, 50, 20)
)
ggplot(snacks) + 
  aes(x = " ", y = count, fill = group) +
  geom_bar(width = 0.5, stat = "identity") + 
  xlab("biscuits") +
  coord_polar("y")
```

#Now lets try zooming in on a plot

```{r}
ggplot(whisky) +
  aes(x = YearFound, y = Capacity, colour = Region) +
  geom_point() +
  coord_cartesian(xlim = c(1940, 2000))
```

```{r}
ggplot(whisky) +
  aes(x = YearFound, y = Capacity, colour = Region) +
  geom_point() +
  xlim(1940, 2000)
```

